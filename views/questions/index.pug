extends ../partials/head
block content
  span.display-none#country= __('Country')
  span.display-none#city= __('City')
  span.display-none#town= __('Town')
  span.display-none#gender= __('Gender')
  span.display-none#phone= __('Phone')
  span.display-none#birth-year= __('Birth Year')
  input.display-none#filters(type="text" value=JSON.stringify(filters))
  input.display-none#options(type="text" value=JSON.stringify(options))
  input.display-none#questions(type="text" value=JSON.stringify(questions))
  .all-wrapper
    .all-header-wrapper
      .header-title-wrapper
        span.header-title= __('Questions')
        span.header-subtitle= __('See, create and edit questions')
      .header-create-new-content-item-button.general-seablue-button(style="width: 250px; margin: 0px")
          span= __('Create Questions')
    .all-content-wrapper
      .all-content-inner-wrapper
        .questions-page-wrapper
          .change-page-wrapper
            .change-page-button.previous-page-button(href=`/questions?` style=(options.skip ? "" : "cursor: not-allowed")) 
              i.fas.fa-chevron-left
              span #{__('Previous')}
            .change-page-button.next-page-button(href=`/questions?` style=(questions.length == options.limit ? "" : "cursor: not-allowed")) 
              span #{__('Next')}
              i.fas.fa-chevron-right
          .filter-questions-wrapper
            .filter-each-item-wrapper
              input.general-input-with-border#filter-name-input(type="text" value=filters.name placeholder=__('Name'))
            .filter-each-item-wrapper
              input.general-input-with-border#filter-text-input(type="text" value=filters.text placeholder=__('Text'))
            .filter-each-item-wrapper
              .general-seablue-border-button.filter-questions-button
                span= __('Filter Questions')
        each question in questions
          .each-item-wrapper
            .each-item-header
              span.each-item-title= question.name
              span.each-item-subtitle= question.text
              i.fas.fa-chevron-down.each-question-details-button
              //- i.fas.fa-check.each-question-delete-button(id=question._id)
              //- i.fas.fa-cog.each-question-edit-button(id=question._id)
            .each-item-content
              .each-item-content-item
                span.each-item-content-item-header #{__('Name')}:
                span.each-item-content-item-value #{question.name}
              .each-item-content-item
                span.each-item-content-item-header #{__('Description')}:
                span.each-item-content-item-value #{question.description}
              .each-item-content-item
                span.each-item-content-item-header #{__('Text')}:
                span.each-item-content-item-value #{question.text}
              .each-item-content-item
                span.each-item-content-item-header #{__('Type')}:
                span.each-item-content-item-value #{__(question.type)}
              .each-item-content-item
                span.each-item-content-item-header #{__('Countries')}:
                span.each-item-content-item-value #{question.countries.map(country => __(country)).join(' ')}
              if question.type == 'short_text' || question.type == 'long_text'
                .each-item-content-item
                  span.each-item-content-item-header #{__('Answer Length')}:
                  span.each-item-content-item-value #{question.answer_length}
              if question.type == 'radio' || question.type == 'checked'
                each choice, i in question.choices
                  .each-item-content-item
                    span.each-item-content-item-header #{__('Choice')} #{i+1}:
                    span.each-item-content-item-value #{choice}
                .each-item-content-item
                  span.each-item-content-item-header #{__('Other Option')}:
                  span.each-item-content-item-value #{question.other_option ? 'Allowed' : 'Not allowed'}
              if question.type == 'range'
                .each-item-content-item
                  span.each-item-content-item-header #{__('Range Minumum')}:
                  span.each-item-content-item-value #{question.min_value}
                .each-item-content-item
                  span.each-item-content-item-header #{__('Range Maximum')}:
                  span.each-item-content-item-value #{question.max_value}
                if question.min_explanation && question.min_explanation.length
                  .each-item-content-item
                    span.each-item-content-item-header #{__('Minimum Explanation')}:
                    span.each-item-content-item-value #{question.min_explanation}
                if question.min_explanation && question.min_explanation.length
                  .each-item-content-item
                    span.each-item-content-item-header #{__('Maximum Explanation')}:
                    span.each-item-content-item-value #{question.max_explanation}
      form.all-content-create-new-content-item-wrapper
        span.content-go-back-button.header-create-new-content-item-back-button < #{__('Back')}
        span.general-input-title= __('Question Name')
        span.general-input-explanation-text= __('Enter the name that the question will be identified by. This name will be shown in filters part of app.usersmagic')
        input.general-input-with-border#name-input(type="text" placeholder="Name")
        span.general-input-title= __('Question Description')
        span.general-input-explanation-text= __('Enter a description that will help you remember the question\'s content')
        input.general-input-with-border#description-input(type="text" placeholder="Description")
        span.general-input-title= __('Question Text')
        span.general-input-explanation-text= __('Enter the text of the question')
        input.general-input-with-border#question-text-input(type="text" placeholder="Text")
        span.general-input-title= __('Question Type')
        span.general-input-explanation-text= __('Select the type of this question')
        .general-drop-down-list-outer-wrapper(style="z-index: 2;")
          .general-drop-down-list-wrapper(style="z-index: 2;")
            input.general-drop-down-list-input#question-type-visible-input(type="text" autocomplete="none" placeholder=__('Question Type'))
            input.general-drop-down-list-input-not-visible#question-type-input(type="text")
            input.general-drop-down-list-items-json(type="text" value=JSON.stringify(question_types.map(type => { return {name: __(type), id: type} })))
            .general-drop-down-choices-wrapper
              each question_type in question_types
                span.general-drop-down-list-each-item(id=question_type)= __(question_type)
        span.general-input-title= __('Answer Length')
        span.general-input-explanation-text= __('Enter the answer length for the question (Short Text or Long Text). Default is 1000')
        input.general-input-with-border#answer-length-input(type="number" placeholder="Answer Length")
        span.general-input-title= __('Choices')
        span.general-input-explanation-text= __('Enter the choices of the question (Radio or Checked) by putting a comma (,) in between each choice. You must have at least one choice')
        input.general-input-with-border#choices-input(type="text" placeholder="Choices")
        span.general-input-title= __('Other Option')
        span.general-input-explanation-text= __('Check if you want an other option for the question (Radio or Checked)')
        .general-checked-input-wrapper
          input.general-checked-input-value#other-option-input(type="text" value="[]")
          .general-each-checked-input
            .general-each-checked-input-icon
              i.fas.fa-check
            span(id="true")= __('Other Option')
        span.general-input-title= __('Range Minimum')
        span.general-input-explanation-text= __('Enter the minumum range of the question (Range). Should be at least 0 and required')
        input.general-input-with-border#range-minimum-input(type="number" placeholder="Range Minumum")
        span.general-input-title= __('Range Maximum')
        span.general-input-explanation-text= __('Enter the minumum range of the question (Range). Should be at most 10 and required')
        input.general-input-with-border#range-maximum-input(type="number" placeholder="Range Maximum")
        span.general-input-title= __('Minumum Explanation')
        span.general-input-explanation-text= __('Enter an explanation for the minumum range. Optional')
        input.general-input-with-border#minimum-explanation-input(type="text" placeholder="Minimum Explanation")
        span.general-input-title= __('Maximum Explanation')
        span.general-input-explanation-text= __('Enter an explanation for the maximum range. Optional')
        input.general-input-with-border#maximum-explanation-input(type="text" placeholder="Maximum Explanation")
        span.general-input-title= __('Countries')
        span.general-input-explanation-text= __('Check the countries you want your question be active for')
        .general-checked-input-wrapper
          input.general-checked-input-value#countries-input(type="text" value="[]")
          each country in countries
            .general-each-checked-input
              .general-each-checked-input-icon
                i.fas.fa-check 
              span(id=country.alpha2_code)= __(country.name)
        .general-input-error-line
          span#bad-request-error= __('You seem to have a missing field. Please check that you have entered all the required fields for your question type.')
        .general-input-error-line
          span#unknown-error= __('An unknown error occured, please try again later')
        button.general-seablue-button(style="width: 250px;")
          span= __('Create')
